# Fastfile for EasyDemo

default_platform(:mac)

platform :mac do
  desc "Deploy to TestFlight"
  lane :beta do
    # Setup App Store Connect API
    api_key = app_store_connect_api_key(
      key_id: ENV["APP_STORE_CONNECT_API_KEY_ID"],
      issuer_id: ENV["APP_STORE_CONNECT_API_ISSUER_ID"],
      key_content: ENV["APP_STORE_CONNECT_API_KEY"]
    )

    # Update version and build
    version = ENV["VERSION_NUMBER"]
    build = ENV["BUILD_NUMBER"] || Time.now.to_i.to_s

    increment_version_number(
      version_number: version,
      xcodeproj: "EasyDemo.xcodeproj"
    ) if version

    increment_build_number(
      build_number: build,
      xcodeproj: "EasyDemo.xcodeproj"
    )

    # Build and package for Mac App Store / TestFlight
    # Note: macOS apps require a .pkg for TestFlight upload
    build_mac_app(
      scheme: "EasyDemo",
      export_method: "app-store",
      output_directory: "build",
      skip_package_pkg: false,
      xcargs: "CODE_SIGN_STYLE=Manual CODE_SIGN_IDENTITY='Apple Distribution' DEVELOPMENT_TEAM=L329D2LS9J PROVISIONING_PROFILE_SPECIFIER='EasyDemo Mac App Store'",
      export_options: {
        method: "app-store",
        teamID: "L329D2LS9J",
        signingStyle: "manual",
        signingCertificate: "Apple Distribution",
        provisioningProfiles: {
          "com.easydemo" => "EasyDemo Mac App Store"
        },
        uploadSymbols: true,
        compileBitcode: false,
        manageAppVersionAndBuildNumber: false
      }
    )

    # Upload to TestFlight
    upload_to_testflight(
      api_key: api_key,
      skip_waiting_for_build_processing: true,
      app_platform: "osx"
    )
  end

  desc "Build locally"
  lane :build do
    build_mac_app(
      scheme: "EasyDemo",
      skip_package_pkg: true
    )
  end

  desc "Run tests"
  lane :test do
    run_tests(
      scheme: "EasyDemo",
      destination: "platform=macOS,arch=arm64",
      code_coverage: true,
      skip_testing: [
        "EasyDemoUITests"
      ],
      xcargs: "CODE_SIGN_IDENTITY='-' CODE_SIGNING_REQUIRED=NO CODE_SIGNING_ALLOWED=NO"
    )
  end

  desc "Lint code"
  lane :lint do
    swiftlint(
      mode: :lint,
      raise_if_swiftlint_error: false
    )
  end
end
